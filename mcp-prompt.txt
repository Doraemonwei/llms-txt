你是一个专业的Python开发工程师，我需要你完成下面的mcp-server的开发工作。
首先，你这次的工作目标是完成一个mcp-server的创建、运行、安装、测试完善和部署5大步，对于每一步我都会给你详细的指导安排，在你实际执行的时候也需要先给出具体的操作计划然后执行，每完成一个步骤都需要在计划上标注已完成

# 项目结构
mcp
├─ .mcp-port
├─ fastmcp-llm.txt
└─ arxiv-mcp
   ├─ .python-version
   ├─ main.py
   ├─ pyproject.toml
   ├─ README.md
   ├─ uv.lock
   ├─ tests
   │  ├─ test_arxiv_mcp.py
   │  └─ __init__.py
   └─ src
      └─ arxiv_mcp
         ├─ arxiv_client.py
         ├─ models.py
         ├─ server.py
         ├─ utils.py
         └─ __init__.py
注意：
- mcp为主工作目录
- .mcp-port中记录着主工作目录下存在的所有mcp-server项目启动时的端口号
- fastmcp-llm.txt文件中的url地址对应的网页内容为FastMCP这个python package详细的信息和使用方式
- arxiv-mcp为已经存在的提供给你参考的mcp-server项目
- 新项目应该采用与arxiv-mcp相同的目录结构，包括src/{project_name}/目录和tests/目录


# 第一大步：mcp-server的创建
1. 去网页https://modelcontextprotocol.io/introduction详细阅读并理解mcp的介绍部分，确保你了解mcp的基本概念和工作原理。
2. 详细阅读fastmcp-llm.txt文本文件中每一条网页的内容以了解FastMCP这个python package的具体使用方式
3. 详细阅读并遵循下方的要求创建新的mcp-server
	- 使用python代码进行创建
	- 使用FastMCP这个python package来进行具体的mcp server开发
	- 在server中使用streamable-http的通信方式而不是stdio，因为最终这个服务将以streamable-http的方式启动并将暴露的服务注册到互联网上
	- 使用uv工具管理整个mcp-server项目
		- 具体的使用uv创建项目的方式为在当前工作目录(mcp)下使用下方脚本初始化uv项目：
			uv init {mcp-server-name}
		- uv init创建项目后，需要手动创建src/{project_name}/目录，后续编写相关的脚本文件路径位置需要与项目结构模块提供的样例mcp-server的结构保持一致
		- 整个mcp-server的具体逻辑代码需要全部包含在初始化的项目中，包括pyproject.toml文件和readme文件
		- 将main.py作为启动这个mcp-server的入口。在第2大步的运行中，cd进入uv项目的目录后直接使用uv run main.py启动服务
		- uv已经安装了，不需要重复安装
	- 在编写实际的mcp-server业务代码之前，完善readme文件。在完成实际代码后，完善pyproject.toml文件。
	- 提供给你参考的mcp-server项目是工作目录下的arxiv-mcp项目，你需要参考这个项目进行开发，具体要求为：
		- 主要的功能都需要在server.py文件中
		- 如果有需要定义数据模型则所有的数据模型都应该在models.py文件中
		- 如果需要使用到工具类或者工具方法则所有的工具类和工具方法都应该在utils.py文件中
		- 复杂的业务处理逻辑不应该放在server.py中，而是根据具体的场景放在类似于arxiv-mcp项目的arxiv_client.py文件中
		- 使用mcp = FastMCP("{new_mcp_name}",host="0.0.0.0",port={random_available_port})实例化FastMCP时，host应该固定为0.0.0.0,因为后续将直接从外网访问这个服务，在生成随机端口前，需要先读取.mcp-port文件内容，确保新生成的端口不在已使用的端口列表中，随机端口的范围为8000-9000。另外，需要将新的{random_available_port}添加到.mcp-port文件中，mcp-port文件每行记录一个mcp-server服务名称以及使用的这个服务使用的端口号，每行格式为'服务名:端口号'，如'arxiv-mcp:8080'
		- 在server.py文件中main()方法中的内容应该固定为mcp.run(transport='streamable-http')以确保这个mcp-server的启动方式是streamable-http

# 第2大步：mcp-server的运行
	- cd进入这个mcp-server项目的根目录，注意不是整个操作空间的根目录
	- 执行uv sync安装依赖
	- 执行uv run main.py运行服务

# 第3大步：安装mcp-server
	- 保存你可以使用的mcp工具的文件的路径为/home/{USER}/.cursor/mcp.json
	- 修改~/.cursor/mcp.json这个json文件，修改的方式为：
		- 假设第2大步中启动的mcp-server的端口是8888且这台设备的ip地址为192.168.31.116,那么你需要在mcp.json这个json文件的mcpServers属性下添加新的变量：
		```json
		"{new_mcp_name}": {
		"type": "streamable-http",
		"url": "http://192.168.31.116:8888/mcp/"
		}
		```
		- 注意url中最后需要有/mcp/以确保你可以通过这个url使用这个mcp-server
	- 注意无论如何不能修改原来已经存在的mcp配置信息
	- 注意无论如何要保证修改后的mcp.json文件是一个合法的json文件
	- 修改完mcp.json文件后你应该可以在自己可以调用的工具列表中看到这个新添加的mcp-server中的所有tool，如果不能看到新工具，请检查mcp.json文件格式是否正确、端口是否正确、服务是否正常运行，然后停止操作并告诉我具体的错误信息
	- 修改完mcp.json文件后你应该就可以在自己的mcp工具库中看到这个mcp以及这个mcp中所有的tool，如果不能就稍等后重新查看，如果连续查看3次后都没有看到新的mcp的信息则提醒我手动打开这个mcp的开关
	- 无论如何，测试mcp-server的方式都应该是安装这个mcp-server后直接调用其中的tool，而不是你自己编写测试脚本进行测试，你自己编写的python测试脚本会干扰项目结构带来不必要的麻烦

# 第4大步：测试完善mcp-server
	- 在第3步中已经成功安装了这个mcp-server，现在应该可以看到这个mcp中的所有工具和提示词，如果无法看到这个mcp相关的工具则停止测试并提醒我确认mcp的设置而不是自行编写测试脚本进行测试
	- 调用相应的工具列表功能展示所有的工具
	- 依次调用所有的工具并判断返回结果是否正常
	- 如果某个工具的测试结果异常则停止这个mcp-server后修复这个mcp-server的代码，修复完成后重新启动然后测试
	- 修复完成后进行最终测试，并给我详细的测试报告。报告内容主要包括：一共有哪些工具，测试每个工具时使用的参数是什么，得到的返回结果是什么，是否正常

# 第5大步：部署
	- 这一步暂时不处理，先忽略，后面我会补充


# 现在，等待我给你关于需要进行上述操作的mcp-server的详细的名称和需求